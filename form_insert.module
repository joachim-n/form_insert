<?php
// $Id$
/**
 * @file field_inject.module
 * TODO: Enter file description here.
 *
 * Framework to allow modules to cause fields from one form to be included inside another.
 *
 * Use cases:
 *  - generalized image_attach, to work with CCK noderef and any content type
 *  - CiviCRM-style collection of user data in other forms.
 *
 * How it works:
 *
 *
 * Some terminology: 
 *  - donor form: the form whose elements are being inserted into another form
 *  - recipient form: the form the user sees with extra elements from the donor form
 *
 * One recipient form can be the subject of several injections (say by differnet modules!)
 * Each injection can inject several forms
 * Each donor form should only get mentioned once though! could lead to data clashes!?!?!
 */

/**
 * Implementation of hook_menu().
 */
function field_inject_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['TODO: Enter path'] = array(
    'title' => 'TODO: Enter menu item title',
    'page callback' => 'TODO: Enter callback function',
    'access arguments' => array('TODO: Enter user permissions'),
  );
  // more complex menu item
  $items['TODO: Enter path'] = array(
    'title' => 'TODO: Enter menu item title',
    'description' => 'TODO: Enter description',
    'page callback' => 'TODO: Enter callback function',
    'page arguments' => '', // An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component.
    'access callback' => '', // defaults to user_access()
    'access arguments' => array('TODO: Enter user permissions'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM, // One of MENU_NORMAL_ITEM / MENU_CALLBACK / MENU_SUGGESTED_ITEM / MENU_LOCAL_TASK / MENU_DEFAULT_LOCAL_TASK
    'menu_name' => '', // Menu to place this item in.
    'title callback' => '', // Function to generate the title, defaults to t(). 
    'title arguments' => '', // Arguments to send to t() or your custom callback. 
  );
  // OPTIONAL: Fill in additional static menu items

  //return $items;
}


/**
 * Implementation of hook_form_alter().
 *
 * Inject donor form elements into recipient forms. 
 * We come here several times, it gets complicated!
 * The first time is the regular form alteration for the recipient form.
 * If the form is indeed a canditate recipient, then we build the donor form --
 * this sets in motion another chain of form building, which brings us here, in 
 * a nested second pass.
 * We detect this second pass with a static variable an, hand over to a 
 * helper function that grabs the form elements we want from the donor and 
 * builds up an array suitable for inserting into the recipient.
 * This is stored as a static variable, whereupon we return.
 * Meanwhile, back at the first pass ranch, the second pass form building 
 * is done, and we can now get the donor elements from the static variable.
 */
function field_inject_form_alter(&$form, $form_state, $form_id) {
  //dsm("HFA: $form_id ====================");

  // Static variables: these allow us to detect the second time we come here
  // when we are altering the donor form.
  static $donor_forms_data = array();
  static $donor_form    = array();
 
  //dsm("2nd pass checks: $form_id");
  //dsm($donor_forms_data, 'donor forms');
  //dsm("static: $injected_form"); // works!
  //dsm("FOO: $foo");
  
  /**
   * Second pass: check to see if we've come here for a donor form.
   */
  if (isset($donor_forms_data[$form_id])) {
    // 2nd time around for this injection:
    // we are altering the donor form
    //dsm('2nd pass');
    // Build up the parts we want to inject, stash them in the $form and get out of here
    // so we return to the 1st pass.
    $donor_form = field_inject_form_alter_donor_form($form, $form_state, $form_id, $donor_forms_data[$form_id]);
    return;
    //dsm("static: $foo");
    // then 
  }
  
  // Get information about insertions.
  $injections = field_inject_injections();
  // @todo stash title! forms try to change it!
  foreach ($injections as $id => $injection) {
    if (in_array($form_id, $injection['recipient forms'])) {
      //dsm("inject: $form_id - $id ============="); 
      //dsm($injection);
      //dsm($form);
      
      //$injected_form = 'WIBBLE';
      //$foo = 'FOO!';
      //$inject_form = drupal_get_form($injection['injected form']);
      
      // set statics
      $injection['id'] = $id;
      $donor_forms_data[$injection['donor form id']] = $injection;
      
      //dsm($donor_forms_data);
      
      // Call the form to embed
      // This sets in motion a whole new form building process which includes
      // another visit to field_inject_form_alter(): see second pass above.
      call_user_func_array($injection['donor form callback'], $injection['donor form arguments']);
      
      // Static $donor_form now holds the elements of the donor form we want.
      // These are in weighted fieldsets.
      // Inject the form element fieldsets into the recipient form.
      $form = array_merge($form, $donor_form);
      // Store the donor form details in a way we can get them back on validate or submit.
      // We don't know how many times we get here, so use the line by line syntax
      // to prevent clobbering.
      $form['field_inject']['#type'] = 'value';
      $form['field_inject']['#value'][$id] = $donor_form['donor form']['#value'];
      // Unset the donor form data now we've stashed it cleanly.
      unset($form['donor form']);
      
      // Clear the static in case there are subsequent injections for this recipient.
      $donor_form = array();
     
      dsm($form);
    }
    // Add our submit handler, just once for all insertions.
    $form['#submit'][] = 'field_inject_injection_submit';
    
    // Clear static data here so hook_form_alter() is back to normal,
    // should another form later this page load be a recipient.
    $donor_forms_data = array();
  }


}

/**
 * Build up the donor form.
 *
 * We come here from the second pass at hook_form_alter, when we are altering
 * the donor form. This gives us access to its structure array, which we plunder
 * for the bits we need.
 *
 * @param $form
 *  The fully built donor form we want to extract elements from.
 */
function field_inject_form_alter_donor_form(&$form, $form_state, $form_id, $injection) {
  // need the injection data here!
  //dsm($form);
  //dsm($injection);
  
  $donor_form = array();
  // Iterate over several sets of injections
  foreach ($injection['donor elements'] as $id => $donor_elements_set) {
    // Create a safe key (we hope!) to prevent clobbering in the recipient form.
    $donor_form_base_key = $injection['id'] . '_' . $id;
    // Create the fieldset for this set of insertions.
    $donor_form[$donor_form_base_key] = array(
      '#type' => 'fieldset',
      // @todo: nice programmatic way of getting these in with defaults if not set by settings
      '#title' => $donor_elements_set['#title'],
      '#weight' => $donor_elements_set['#weight'],
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#element_validate' => array('field_inject_injection_validate'),
      '#element_submit' => array('field_inject_injection_validate'), /// ??
      'validate parameters' => array(
        '#type' => 'value', 
        '#value' => array('bar'),
      ),
    );
    // Iterate over the elements we have to inject.
    foreach ($donor_elements_set['elements'] as $element_id) {
      //dsm("donor element id: $element_id");
      //dsm($form[$element_id]);
      $donor_element_id = $donor_form_base_key . '_' . $element_id;
      $donor_form[$donor_form_base_key][$donor_element_id] = $form[$element_id];
      $donor_form[$donor_form_base_key][$donor_element_id]['#default_value'] = 'wigsticks';
      // @todo altering callback, to put in default values among other things!
    }
  }
  // Stash the original form here where the first-pass hook_form_alter() can
  // retrieve it.
  $donor_form['donor form'] = array(
    '#type' => 'value', 
    '#value' => $form,
  );
  
  //dsm($donor_form);
  
  // ???
  //$form['injectables'] = $donor_form;
  return $donor_form;
}


/**
 * Validation for all recipient forms.
 *
 * When we get here we have already been through basic form validation
 * eg, #required fields.
 */
function field_inject_injection_validate($element, &$form_state) {
  // For now, just return, as the basic case #required is handled.
  //dsm($element);
  //dsm($form_state);
  return;

  dsm('our validate');
  dsm(form_get_errors());
 
  // #required works
  // donor forms that have their own validation
  // will need this function to fiddle with form errors:
  //  - stash form_get_errors()
  //  - clear all form errors
  //  - run the donor form's validation, somehow!?!?!?!
  //  - get form errors
  //  - prefix the form IDs
  //  - clear form errors again
  //  - merge with our stash and re-set them all
}

function field_inject_injection_submit($form, &$form_state) {
  dsm('our submit');
  //dsm(form_get_errors());
  //dsm($element);
  dsm($form_state);  

  // Get information about insertions.
  $injections = field_inject_injections();

  // Create an artificial form state to pass to drupal_execute().
  $donor_form_state = array();
  $donor_form_state['values']['name'] = 'robo-user';

  
  foreach ($form_state['values']['field_inject'] as $id => $current_insertion) {
    $donor_form_id = $injections[$id];
    
    foreach ($injections[$id]['donor elements'] as $group_id => $element_group) {
      foreach ($element_group['elements'] as $field_name) {
        // Get the values of the prefixed elements back out and into the artificial form state.
        $recipient_element_key = $id . '_' . $group_id . '_' . $field_name;
        $donor_form_state['values'][$field_name] = $form_state['values'][$id . '_' . $group_id][$recipient_element_key];
      }
    }
  }
  
  dsm($donor_form_state);
  // wont work for nodes! need node object too!
  //drupal_execute($donor_form_id, $donor_form_state);
  
  
  //print_r($element);
  
  // need to:
  // get hold of the donor form somehow (we have it stashed! but how do we know it's ours?)
  // insert defaults or calculated values
  // translate our form values into the original names
  // build a form state
  // call the submit handler
}


/**
 * Return settings data.
 */
function field_inject_injections() {
  // This is an example for development purposes.
  // This function should ultimately return data defined by implementing modules.
  $data = array(
    // An injection set: things from one form to be donor in another (or
    // several).
    /*
    'image_attach' => array( // unique key, prefix with your module name for safety!
      'recipient forms' => array('story_node_form'), // array of form IDs
      // nope, needs to be callback to hit all node forms, say!
      
      // some forms need to be obtained with a wrapper around drupal_get_form,
      // such as node add forms!
      'donor form id'  => 'image_node_form',
      'donor form callback'  => 'node_add', // TODO defaults to drupal_get_form
      'donor form arguments' => array('image'),  
      'remove' => array(
        'FORM element iD!' => '', // ??? need to say a value to put into the removed item.
        // fixed? from other element? from submission result? callback!!
      ),
      'donor elements' => array( // set of injections for this
        'image' => array(
          '#title' => 'Attached image',
          '#weight' => 10,
          'after' => '',
          // @todo: allows description, etc. basically, make this array formAPI-style data
          'elements' => array('title', 'image'),
          // @todo: specify callback to alter these elements,
          //  eg for image attach, 'title' becomes 'Image title'.
        ),
      ),
    ),
    */
    'cck_noderef' => array( // unique key, prefix with your module name for safety!
      'recipient forms' => array('story_node_form'), // array of form IDs
      // nope, needs to be callback to hit all node forms, say!
      
      // some forms need to be obtained with a wrapper around drupal_get_form,
      // such as node add forms!
      // BEWARE: form id and node_add() arguments differ by -/_!!!
      'donor form id'  => 'group_node_form',
      'donor form callback'  => 'node_add', // @TODO defaults to drupal_get_form
      'donor form arguments' => array('group'),
      'remove' => array(
        'FORM element iD!' => '', // ??? need to say a value to put into the removed item.
        // fixed? from other element? from submission result? callback!!
      ),
      'donor elements' => array( // set of injections for this
        'project' => array(
          '#title' => 'Related grouping',
          '#weight' => -10,
          'after' => '',
          // @todo: allows description, etc. basically, make this array formAPI-style data
          'elements' => array('title'),
          // @todo: specify callback to alter these elements,
          //  eg for image attach, 'title' becomes 'Image title'.
        ),
      ),
    ),
  );  
  return $data;
  
  
  
}


// isnodeform
//   if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
