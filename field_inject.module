<?php
// $Id$
/**
 * @file field_inject.module
 * TODO: Enter file description here.
 *
 * Some terminology: 
 *  - injected form: the form whose elements are being injected into another form
 *  - recipient form: the form the user sees with extra elements from the injected form
 *
 * One recipient form can be the subject of several injections (say by differnet modules!)
 * Each injection can inject several forms
 * Each injected form should only get mentioned once though! could lead to data clashes!?!?!
 */

/**
 * Implementation of hook_menu().
 */
function field_inject_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['TODO: Enter path'] = array(
    'title' => 'TODO: Enter menu item title',
    'page callback' => 'TODO: Enter callback function',
    'access arguments' => array('TODO: Enter user permissions'),
  );
  // more complex menu item
  $items['TODO: Enter path'] = array(
    'title' => 'TODO: Enter menu item title',
    'description' => 'TODO: Enter description',
    'page callback' => 'TODO: Enter callback function',
    'page arguments' => '', // An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component.
    'access callback' => '', // defaults to user_access()
    'access arguments' => array('TODO: Enter user permissions'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM, // One of MENU_NORMAL_ITEM / MENU_CALLBACK / MENU_SUGGESTED_ITEM / MENU_LOCAL_TASK / MENU_DEFAULT_LOCAL_TASK
    'menu_name' => '', // Menu to place this item in.
    'title callback' => '', // Function to generate the title, defaults to t(). 
    'title arguments' => '', // Arguments to send to t() or your custom callback. 
  );
  // OPTIONAL: Fill in additional static menu items

  return $items;
}


/**
 * Implementation of hook_form_alter().
 *
 * Nomenclature: foo_form is ids, form_foo is form data???
 * Hideous var names. fixme!
 */
function field_inject_form_alter(&$form, $form_state, $form_id) {
  dsm("HFA: $form_id ====================");

  static $injected_forms_data = array();
  static $form_inject    = array();
  // This allows us to detect the second time we come here when we are altering
  // the injected form.
  
  dsm($injected_forms_data, 'injected forms');
  //dsm("static: $injected_form"); // works!
  //dsm("FOO: $foo");
  
  // Second pass:
  if (isset($injected_forms_data[$form_id])) {
    // 2nd time around for this injection:
    // we are altering the injected form
    //dsm('2nd');
    // Build up the parts we want to inject, stash them in the $form and get out of here
    // so we return to the 1st pass.
    $form_inject = field_inject_form_alter_injected_form($form, $form_state, $form_id, $injected_forms_data[$form_id]);
    return;
    //dsm("static: $foo");
    // then 
  }
  
  $injections = field_inject_injections();
  foreach ($injections as $id => $injection) {
    if (in_array($form_id, $injection['recipient forms'])) {
      dsm('inject: --'); 
      dsm($injection);
      dsm($form);
      
      //$injected_form = 'WIBBLE';
      //$foo = 'FOO!';
      //$inject_form = drupal_get_form($injection['injected form']);
      
      // set statics
      $injection['id'] = $id;
      $injected_forms_data[$injection['injected form id']] = $injection;
      
      // Call the form to embed
      // This sets in motion a whole new form building process which includes
      // another visit to field_inject_form_alter(): see second pass above.
      call_user_func_array($injection['injected form callback'], $injection['injected form arguments']);
      
      // Static $form_inject now holds the elements of the injected form we want.
      // These are in weighted fieldsets.
      // Inject the form element fieldsets into the recipient form.
      $form = array_merge($form, $form_inject);
      // Clear the static in case there are subsequent injections for this recipient.
      $form_inject = array();
     
      dsm($form);
      
      //dsm($inject_form);
      foreach ($injection['inject elements'] as $injection_piece) {
        //$inject_form = drupal
      }
    }
    // MUST CLEAR STATIC HERE and reset HFA to normal
  }


}

/////// builds up everything from the injected form.
function field_inject_form_alter_injected_form(&$form, $form_state, $form_id, $injection) {
  // need the injection data here!
  //dsm($form);
  //dsm($injection);
  
  $form_inject = array();
  // Iterate over several sets of injections
  foreach ($injection['inject elements'] as $id => $inject_elements_set) {
    // Create a safe key (we hope!) to prevent clobbering in the recipient form.
    $injected_form_base_key = $injection['id'] . '_' . $id;
    $form_inject[$injected_form_base_key] = array(
      '#type' => 'fieldset',
      '#title' => t('GAH?'),
      '#weight' => $inject_elements_set['weight'],
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#element_validate' => 'field_inject_injection_validate',
      'validate parameters' => array(
        '#type' => 'value', 
        '#value' => array('bar'),
      ),
    );
    // Iterate over the elements we have to inject.
    foreach ($inject_elements_set['elements'] as $element_id) {
      //dsm($element_id);
      //dsm($form[$element_id]);
      $form_inject[$injected_form_base_key][$injected_form_base_key . '_' . $element_id] = $form[$element_id];
    }
  }
  
  //dsm($form_inject);
  
  // ???
  //$form['injectables'] = $form_inject;
  return $form_inject;
}


function php_static_recursive() {
  static $foo;  
  
  
}


/**
 * Return settings data.
 */
function field_inject_injections() {
  // This is an example for development purposes.
  // This function should ultimately return data defined by implementing modules.
  $data = array(
    // An injection set: things from one form to be injected in another (or
    // several).
    'image_attach' => array( // unique key, prefix with your module name for safety!
      'recipient forms' => array('story_node_form'), // array of form IDs
      // nope, needs to be callback to hit all node forms, say!
      
      // some forms need to be obtained with a wrapper around drupal_get_form,
      // such as node add forms!
      'injected form id'  => 'image_node_form',
      'injected form callback'  => 'node_add', // TODO defaults to drupal_get_form
      'injected form arguments' => array('image'),  
     'remove' => array(
        'FORM element iD!' => '', // ??? need to say a value to put into the removed item.
        // fixed? from other element? from submission result? callback!!
      ),
      'inject elements' => array( // set of injections for this
        'image' => array(
          'after' => '',
          'weight' => 10,
          // @todo: allows description, etc. basically, make this array formAPI-style data
          'elements' => array('title', 'image'),
          // @todo: specify callback to alter these elements, eg for image attach,
          // 'title' becomes 'Image title'.
        ),
      ),
    ),
  );  
  return $data;
  
  
  
}


// isnodeform
//   if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
